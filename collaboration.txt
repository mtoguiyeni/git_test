C'est une excellente question qui d√©crit le processus au c≈ìur du travail de d√©veloppement moderne. Mettre en place un flux de travail collaboratif avec Git est simple et extr√™mement puissant.

Voici un guide complet des √©tapes et des commandes pour vous (le propri√©taire du projet) et pour votre coll√®gue (le collaborateur).

Pr√©requis
Les deux personnes doivent avoir Git install√© sur leur machine.

Les deux personnes doivent avoir un compte sur une plateforme comme GitHub, GitLab ou Bitbucket. (Nous utiliserons GitHub pour cet exemple).

üë§ Phase 1 : Actions du Propri√©taire du Projet (Vous)
Votre objectif est de mettre le projet sur GitHub et de donner l'acc√®s √† votre coll√®gue.

√âtape 1.1 : Mettre le projet sur GitHub
Si votre projet n'est que sur votre machine locale, vous devez d'abord le pousser sur un d√©p√¥t distant.
Cr√©ez un nouveau d√©p√¥t sur GitHub.com (sans fichier README ou .gitignore pour l'instant).
Liez votre projet local √† ce d√©p√¥t distant et poussez la branche principale :
# Lie votre projet au d√©p√¥t distant
git remote add origin <URL_DU_D√âP√îT_SUR_GITHUB>
# Pousse votre branche main vers GitHub
git push -u origin main

√âtape 1.2 : Inviter votre coll√®gue comme collaborateur
C'est l'√©tape qui donne les droits d'√©criture √† votre coll√®gue.
Sur la page de votre d√©p√¥t GitHub, allez dans Settings (Param√®tres).
Dans le menu de gauche, cliquez sur Collaborators (Collaborateurs).
Cliquez sur Add people (Ajouter des personnes).
Entrez le nom d'utilisateur GitHub de votre coll√®gue et envoyez l'invitation.

üë• Phase 2 : Actions du Collaborateur (Votre Coll√®gue)
L'objectif de votre coll√®gue est de r√©cup√©rer le projet et de se pr√©parer √† travailler.

√âtape 2.1 : Accepter l'invitation
Votre coll√®gue recevra une notification par e-mail et sur son compte GitHub. Il doit accepter l'invitation pour pouvoir pousser des modifications.
√âtape 2.2 : Cloner le projet
Votre coll√®gue doit maintenant t√©l√©charger une copie compl√®te du projet sur sa machine. Il ne doit le faire qu'une seule fois au d√©but.
# Il copie l'URL depuis la page GitHub du projet
git clone <URL_DU_D√âP√îT_SUR_GITHUB>
Cette commande cr√©e un dossier sur son ordinateur avec tout le projet et son historique.

Phase 3 : Le Flux de Travail Collaboratif (La Boucle)
C'est la routine que votre coll√®gue suivra chaque fois qu'il voudra ajouter une contribution.

Actions du Collaborateur :
Se synchroniser avant de commencer : Toujours s'assurer de partir de la version la plus r√©cente du projet.
# Se place sur la branche principale
git switch main
# R√©cup√®re les derni√®res modifications
git pull origin main

Cr√©er une branche d√©di√©e : C'est la r√®gle d'or. Ne jamais travailler directement sur main.
# Cr√©e une nouvelle branche et bascule dessus
git checkout -b nom-de-la-nouvelle-fonctionnalite

Travailler : Modifier le code, ajouter des fichiers, etc.
Faire des commits : Enregistrer le travail de mani√®re atomique.
git add .
git commit -m "Message clair expliquant les modifications"
Pousser la nouvelle branche : Partager son travail sur le d√©p√¥t distant.
# Le -u configure le suivi pour la premi√®re fois
git push -u origin nom-de-la-nouvelle-fonctionnalite

Actions du Propri√©taire (ou du Collaborateur) : La "Pull Request"
Une fois la branche pouss√©e, le collaborateur doit cr√©er une Pull Request (ou "Demande de Tirage") sur GitHub. C'est une demande formelle pour fusionner son travail dans la branche main.

Le collaborateur va sur la page GitHub. Un bandeau jaune appara√Æt, lui proposant de cr√©er une Pull Request pour sa branche r√©cemment pouss√©e.

Il clique, ajoute un titre et une description, puis cr√©e la Pull Request.

Vous (le propri√©taire) recevez une notification. Vous pouvez maintenant :

Discuter des modifications.

Revoir le code ligne par ligne.

Demander des changements si n√©cessaire.

Actions du Propri√©taire : La Fusion
Une fois que vous √™tes satisfait du travail :

Vous cliquez sur le bouton vert "Merge pull request" sur la page de la Pull Request sur GitHub.

Vous confirmez la fusion.

‚úÖ Le code de votre coll√®gue est maintenant officiellement int√©gr√© √† la branche main du projet !

Phase 4 : Tout le monde se synchronise
Apr√®s la fusion, la branche main sur le d√©p√¥t distant a √©t√© mise √† jour. 
Tout le monde (vous et votre coll√®gue) doit mettre √† jour sa version locale de main.

Bash

git switch main
git pull origin main
Et la boucle recommence pour la prochaine fonctionnalit√© ! 
Ce flux de travail, centr√© sur les branches et les Pull Requests, 
est le standard professionnel qui garantit un projet propre et une collaboration sans accroc.
